{
  "openapi": "3.0.2",
  "info": {
    "title": "Tilitintin API",
    "description": "Complete set of API end-points to manage bookkeeping.",
    "version": "1.0",
    "contact": {
      "name": "Tommi Ronkainen"
    },
    "license": {
      "name": "GPL-3.0",
      "url": "https://opensource.org/licenses/GPL-3.0"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3101",
      "description": "Local development host"
    }
  ],
  "components": {
    "securitySchemes": {
      "Bearer Token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer Token": []
    }
  ],
  "paths": {
    "/auth": {
      "post": {
        "security": [],
        "operationId": "login",
        "tags": [
          "Login"
        ],
        "summary": "Log in with a password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "description": "Email of the user.",
                    "type": "string",
                    "example": "my.name@gmail.com"
                  },
                  "password": {
                    "description": "Password of the user.",
                    "type": "string",
                    "example": "hiwD322ds_aede2"
                  }
                },
                "required": [
                  "user",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1auth~1refresh/get/responses/200/content/application~1json/schema/items"
                    }
                  ],
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Encryption key for client semi-private data stored in the local store.",
                      "type": "string",
                      "example": "5a4f52c1caa84912b58830a0d1c1a5e8"
                    },
                    "data": {
                      "description": "Encryption data for client semi-private data stored in the local store.",
                      "type": "string",
                      "example": "lZXBpbmciLCJpc3MiOiJBYmFj"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Login failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Incorrect username or password."
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "get": {
        "operationId": "refreshToken",
        "tags": [
          "Login"
        ],
        "security": [],
        "summary": "Retrieve new token pair",
        "responses": {
          "200": {
            "description": "If given refrestoken is valid, return new access token and refresh token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "token": {
                        "description": "Bearer token for API end points.",
                        "type": "string",
                        "example": "7bf61f0db64ec74f68ff099e53b218e9611a0"
                      },
                      "refresh": {
                        "description": "Bearer token for renewing existing token.",
                        "type": "string",
                        "example": "XRhIjp7ImF1ZGllbmNlIjoiYm9va2tl"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/auth/refresh/ui": {
      "get": {
        "operationId": "refreshUIToken",
        "tags": [
          "Login"
        ],
        "security": [],
        "summary": "Retrieve new token pair for UI server",
        "responses": {
          "200": {
            "description": "If given refrestoken is valid, return new access token and refresh token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1auth~1refresh/get/responses/200/content/application~1json/schema/items"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db": {
      "get": {
        "operationId": "getDatabases",
        "tags": [
          "Databases"
        ],
        "summary": "List of databases",
        "responses": {
          "200": {
            "description": "Get the list of all databases accessible by the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Globally unique name for the database.",
                        "type": "string",
                        "pattern": "^[0-9a-z-_]+$",
                        "example": "mydb2"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "description": "Error message.",
                      "type": "string",
                      "example": "Access denied."
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createDatabase",
        "tags": [
          "Databases"
        ],
        "summary": "Create a database",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1db/get/responses/200/content/application~1json/schema/items"
                  }
                ],
                "type": "object",
                "properties": {
                  "scheme": {
                    "description": "A code of the supported scheme available.",
                    "type": "string",
                    "example": "SchemaName"
                  },
                  "companyName": {
                    "description": "Name of the company,",
                    "type": "string",
                    "example": "Company Inc."
                  },
                  "companyCode": {
                    "description": "Official registration code of the company.",
                    "type": "string",
                    "example": "1234567-US"
                  },
                  "language": {
                    "description": "Language used in the database.",
                    "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report~1%7Bformat%7D~1%7Bid%7D/get/parameters/9/schema",
                    "example": "en"
                  },
                  "currency": {
                    "description": "System default currency for the database.",
                    "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1account~1%7Bid%7D/patch/requestBody/content/application~1json/schema/allOf/0/properties/currency",
                    "example": "USD"
                  }
                },
                "required": [
                  "scheme",
                  "databaseName",
                  "companyName"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "New database successfully created."
          },
          "400": {
            "description": "Invalid payload in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "Explanation of the incorrect request parameters.",
                      "type": "string",
                      "example": "Invalid parameters for request."
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseName",
          "schema": {
            "$ref": "./components/types/databaseName.yaml"
          },
          "required": true
        }
      ],
      "delete": {
        "operationId": "deleteDatabase",
        "tags": [
          "Databases"
        ],
        "summary": "Delete a database",
        "responses": {
          "204": {
            "description": "Database successfully deleted."
          },
          "400": {
            "$ref": "#/paths/~1db/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          },
          "404": {
            "description": "Required target not found.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "description": "Error message.",
                      "type": "string",
                      "example": "Not found."
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/db/upload": {
      "post": {
        "operationId": "uploadDatabase",
        "tags": [
          "Databases"
        ],
        "summary": "Upload a database file",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "A database file in the format used for saving database to the file.",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "New database successfully created."
          },
          "400": {
            "$ref": "#/paths/~1db/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          },
          "500": {
            "description": "Proccessing ended in internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "description": "Error message.",
                      "type": "string",
                      "example": "Internal server error."
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/db/{databaseName}/account": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseName",
          "schema": {
            "$ref": "./components/types/databaseName.yaml"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "getAccounts",
        "tags": [
          "Accounts"
        ],
        "summary": "List of all accounts",
        "responses": {
          "200": {
            "description": "Get the list of all accounts in the database.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1account/post/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      },
      "post": {
        "operationId": "createAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Create new account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "The ID of the account.",
                        "type": "integer",
                        "minimum": 1
                      }
                    }
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1account~1%7Bid%7D/patch/requestBody/content/application~1json/schema/allOf/0"
                      }
                    ],
                    "required": [
                      "name",
                      "number",
                      "type"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly created account.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1account~1%7Bid%7D/patch/requestBody/content/application~1json/schema/allOf/0"
                    }
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the account.",
                      "type": "integer",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1db/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}/account/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseName",
          "schema": {
            "$ref": "./components/types/databaseName.yaml"
          },
          "required": true
        },
        {
          "in": "path",
          "name": "id",
          "schema": {
            "$ref": "./components/types/id.yaml"
          },
          "required": true,
          "description": "The ID of the account."
        }
      ],
      "get": {
        "operationId": "getAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Get account data of one account.",
        "responses": {
          "200": {
            "description": "Get the details of the account.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1account/post/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "periods": {
                          "description": "List of periods that account has transactions.",
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1period/post/responses/200/content/application~1json/schema"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "entries": {
                                    "description": "The number of transactions for the account in this period.",
                                    "type": "integer",
                                    "example": 31
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1db~1%7BdatabaseName%7D/delete/responses/404"
          }
        }
      },
      "patch": {
        "operationId": "updateAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Change the account attributes.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "number": {
                        "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1heading/get/responses/200/content/application~1json/schema/items/properties/number"
                      },
                      "name": {
                        "description": "Name of the account.",
                        "type": "string",
                        "example": "Savings Bank Account"
                      },
                      "type": {
                        "description": "Type of the account.",
                        "type": "string",
                        "enum": [
                          "ASSET",
                          "LIABILITY",
                          "EQUITY",
                          "REVENUE",
                          "EXPENSE",
                          "PROFIT_PREV",
                          "PROFIT"
                        ],
                        "example": "EXPENSE"
                      },
                      "language": {
                        "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report~1%7Bformat%7D~1%7Bid%7D/get/parameters/9/schema"
                      },
                      "currency": {
                        "description": "Currency",
                        "type": "string",
                        "enum": [
                          "EUR",
                          "ZAR",
                          "USD"
                        ],
                        "example": "EUR"
                      },
                      "data": {
                        "description": "Additional accout attributes.",
                        "type": "object",
                        "properties": {
                          "favourite": {
                            "description": "If set, this account can be filtered as favourite account.",
                            "type": "boolean",
                            "example": true
                          },
                          "tax": {
                            "description": "The tax type code.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Account updated successfully."
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}/document": {
      "get": {
        "operationId": "getDocuments",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "databaseName",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/0/schema"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "entries",
            "schema": {
              "type": "boolean"
            },
            "description": "If given, list also entries of each document."
          },
          {
            "in": "query",
            "name": "period",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/1/schema"
            },
            "description": "If given, limit to the documents in the period with this ID."
          }
        ],
        "summary": "List of all transactions",
        "responses": {
          "200": {
            "description": "Get the list of documents in the database or period.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1document/post/requestBody/content/application~1json/schema/allOf/0"
                      }
                    ],
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "The ID of the document.",
                        "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/1/schema"
                      },
                      "entries": {
                        "description": "Entries of the document.",
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/post/requestBody/content/application~1json/schema/allOf/0"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      },
      "post": {
        "operationId": "createDocument",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "databaseName",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/0/schema"
            },
            "required": true
          }
        ],
        "summary": "Create new transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "number": {
                        "description": "Order number of the document. Zero is reserved for initial balances.",
                        "type": "integer",
                        "minimum": 0,
                        "example": 15
                      },
                      "date": {
                        "description": "Transaction date.",
                        "type": "string",
                        "format": "date",
                        "example": "2001-06-15"
                      },
                      "period_id": {
                        "description": "The period this document belongs. to.",
                        "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/1/schema",
                        "example": 3
                      },
                      "data": {
                        "description": "Additional document attributes.",
                        "type": "object"
                      }
                    }
                  }
                ],
                "required": [
                  "date",
                  "period_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly created document.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1document/post/requestBody/content/application~1json/schema/allOf/0"
                    }
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the document.",
                      "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/1/schema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1db/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}/document/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseName",
          "schema": {
            "$ref": "./components/types/databaseName.yaml"
          },
          "required": true
        },
        {
          "in": "path",
          "name": "id",
          "schema": {
            "$ref": "./components/types/id.yaml"
          },
          "required": true,
          "description": "The ID of the document."
        }
      ],
      "get": {
        "operationId": "getDocument",
        "tags": [
          "Documents"
        ],
        "summary": "Get data of one transaction",
        "responses": {
          "200": {
            "description": "Get the details of the transaction document.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1document/post/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "entries": {
                          "description": "List of entries of thistransactions.",
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/post/responses/200/content/application~1json/schema"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1db~1%7BdatabaseName%7D/delete/responses/404"
          }
        }
      },
      "patch": {
        "operationId": "updateDocument",
        "tags": [
          "Documents"
        ],
        "summary": "Change the document attributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1document/post/requestBody/content/application~1json/schema/allOf/0"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Document updated successfully."
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      },
      "delete": {
        "operationId": "deleteDocument",
        "tags": [
          "Documents"
        ],
        "summary": "Delete a transaction",
        "responses": {
          "204": {
            "description": "Document deleted successfully."
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}/entry": {
      "get": {
        "operationId": "getEntries",
        "tags": [
          "Entries"
        ],
        "summary": "List of all transaction lines",
        "parameters": [
          {
            "in": "path",
            "name": "databaseName",
            "schema": {
              "description": "Name of the database.",
              "type": "string",
              "pattern": "^[0-9a-z-_]+$",
              "example": "company_2"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "account_id",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "If given, limit to the entries associated with this account ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Get the list of enntries in the database or for an account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/post/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      },
      "post": {
        "operationId": "createEntry",
        "tags": [
          "Entries"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "databaseName",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/0/schema"
            },
            "required": true
          }
        ],
        "summary": "Create new transaction line",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "document_id": {
                        "description": "The ID of the document.",
                        "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/1/schema"
                      },
                      "account_id": {
                        "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/1/schema",
                        "description": "The ID of the account."
                      },
                      "debit": {
                        "description": "If true, this entry goes to debit side.",
                        "type": "boolean",
                        "example": false
                      },
                      "amount": {
                        "description": "Currency amount in cents for this transaction line.",
                        "type": "number",
                        "minimum": 0,
                        "example": 3200
                      },
                      "description": {
                        "description": "Text of the transaction line.",
                        "type": "string",
                        "example": "Computer purchase"
                      },
                      "row_number": {
                        "description": "Order number for display.",
                        "type": "number",
                        "minimum": 1,
                        "example": 1
                      },
                      "data": {
                        "description": "Additional attributes for the transaction line.",
                        "type": "object"
                      }
                    }
                  }
                ],
                "required": [
                  "document_id",
                  "account_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly created entry.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/post/requestBody/content/application~1json/schema/allOf/0"
                    }
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the entry.",
                      "type": "integer",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1db/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}/entry/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseName",
          "schema": {
            "$ref": "./components/types/databaseName.yaml"
          },
          "required": true
        },
        {
          "in": "path",
          "name": "id",
          "schema": {
            "$ref": "./components/types/id.yaml"
          },
          "required": true,
          "description": "The ID of the entry."
        }
      ],
      "get": {
        "operationId": "getEntry",
        "tags": [
          "Entries"
        ],
        "summary": "Get data of one transaction line",
        "responses": {
          "200": {
            "description": "Get the details of the transaction entries.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1db~1%7BdatabaseName%7D/delete/responses/404"
          }
        }
      },
      "patch": {
        "operationId": "updateEntry",
        "tags": [
          "Entries"
        ],
        "summary": "Change the line attributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/post/requestBody/content/application~1json/schema/allOf/0"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Entry updated successfully."
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      },
      "delete": {
        "operationId": "deleteEntry",
        "tags": [
          "Entries"
        ],
        "summary": "Delete a transaction line",
        "responses": {
          "204": {
            "description": "Entry deleted successfully."
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}/heading": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseName",
          "schema": {
            "$ref": "./components/types/databaseName.yaml"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "getHeadings",
        "tags": [
          "Headings"
        ],
        "summary": "Get account list headings",
        "responses": {
          "200": {
            "description": "This list describes headings that can be used when\ndisplaying account lists.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "The ID of the heading.",
                        "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/1/schema"
                      },
                      "number": {
                        "description": "Numeric code of the account as a string.",
                        "type": "string",
                        "pattern": "^[0-9]+$",
                        "example": "3000"
                      },
                      "text": {
                        "description": "Text of the title line.",
                        "type": "string",
                        "example": "Expenses"
                      },
                      "level": {
                        "description": "A hierarchival level of the title.",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 5,
                        "example": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}/period": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseName",
          "schema": {
            "$ref": "./components/types/databaseName.yaml"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "getPeriods",
        "tags": [
          "Periods"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "databaseName",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/0/schema"
            },
            "required": true
          }
        ],
        "summary": "List of all periods",
        "responses": {
          "200": {
            "description": "Get the list of periods in the database.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1period/post/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      },
      "post": {
        "operationId": "createPeriod",
        "tags": [
          "Periods"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "databaseName",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/0/schema"
            },
            "required": true
          }
        ],
        "summary": "Create new period",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "start_date": {
                        "description": "The first date included in the period.",
                        "type": "string",
                        "format": "date",
                        "example": "2001-01-01"
                      },
                      "end_date": {
                        "description": "The last date included in the period.",
                        "type": "string",
                        "format": "date",
                        "example": "2001-12-31"
                      }
                    }
                  }
                ],
                "required": [
                  "start_date",
                  "end_date"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly created period.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1period/post/requestBody/content/application~1json/schema/allOf/0"
                    }
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the period.",
                      "type": "integer",
                      "minimum": 1
                    },
                    "locked": {
                      "description": "If set, the period transactions cannot be modified anymore.",
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1db/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}/period/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseName",
          "schema": {
            "$ref": "./components/types/databaseName.yaml"
          },
          "required": true
        },
        {
          "in": "path",
          "name": "id",
          "schema": {
            "$ref": "./components/types/id.yaml"
          },
          "required": true,
          "description": "The ID of the period."
        }
      ],
      "get": {
        "operationId": "getPeriod",
        "tags": [
          "Periods"
        ],
        "summary": "Get all account balances",
        "responses": {
          "200": {
            "description": "Get the list of all accounts that have transactions\nand their current balances.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1period/post/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "balances": {
                          "description": "List of account balances having any entries on this period.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The account ID.",
                                "type": "integer",
                                "minimum": 1
                              },
                              "number": {
                                "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1heading/get/responses/200/content/application~1json/schema/items/properties/number"
                              },
                              "name": {
                                "description": "Name of the account.",
                                "type": "string",
                                "example": "VAT from sales"
                              },
                              "debit": {
                                "description": "Total of debit transactions in cents.",
                                "type": "integer",
                                "minimum": 0,
                                "example": 2000
                              },
                              "credit": {
                                "description": "Total of credit transactions in cents.",
                                "type": "integer",
                                "minimum": 0,
                                "example": 3000
                              },
                              "total": {
                                "description": "Total amount of transactions in cents.",
                                "type": "integer",
                                "example": -1000
                              },
                              "period_id": {
                                "description": "The period ID.",
                                "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/1/schema"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1db~1%7BdatabaseName%7D/delete/responses/404"
          }
        }
      },
      "patch": {
        "operationId": "updatePeriod",
        "tags": [
          "Periods"
        ],
        "summary": "Change the period attributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1period/post/requestBody/content/application~1json/schema/allOf/0"
                  }
                ],
                "type": "object",
                "properties": {
                  "locked": {
                    "description": "If set, the period transactions cannot be modified anymore.",
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Period updated successfully."
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      },
      "delete": {
        "operationId": "deletePeriod",
        "tags": [
          "Periods"
        ],
        "summary": "Delete a period",
        "responses": {
          "204": {
            "description": "Period deleted successfully."
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}/report": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseName",
          "schema": {
            "$ref": "./components/types/databaseName.yaml"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "getReportOptions",
        "tags": [
          "Reports"
        ],
        "summary": "Available report options",
        "responses": {
          "200": {
            "description": "An object describing available report options.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance-sheet-detailed": {
                      "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report/get/responses/200/content/application~1json/schema/properties/balance-sheet"
                    },
                    "balance-sheet": {
                      "type": "object",
                      "properties": {
                        "quarter1": {
                          "description": "Display as a radio button option.",
                          "type": "string",
                          "enum": [
                            "radio:1"
                          ],
                          "example": "radio:1"
                        },
                        "quarter2": {
                          "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report/get/responses/200/content/application~1json/schema/properties/balance-sheet/properties/quarter1"
                        },
                        "quarter3": {
                          "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report/get/responses/200/content/application~1json/schema/properties/balance-sheet/properties/quarter1"
                        },
                        "full": {
                          "description": "Display as a radio button option, which is selected by the default.",
                          "type": "string",
                          "enum": [
                            "radio:1:default"
                          ],
                          "example": "radio:1:default"
                        }
                      }
                    },
                    "income-statement-detailed": {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report/get/responses/200/content/application~1json/schema/properties/balance-sheet"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "byTags": {
                              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report/get/responses/200/content/application~1json/schema/properties/income-statement/allOf/1/properties/byTags"
                            }
                          }
                        }
                      ]
                    },
                    "income-statement": {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report/get/responses/200/content/application~1json/schema/properties/balance-sheet"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "byTags": {
                              "description": "Display as a toggle button.",
                              "type": "string",
                              "enum": [
                                "boolean"
                              ],
                              "example": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "general-journal": {
                      "type": "object",
                      "properties": {
                        "compact": {
                          "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report/get/responses/200/content/application~1json/schema/properties/general-ledger/properties/compact"
                        }
                      }
                    },
                    "general-ledger": {
                      "type": "object",
                      "properties": {
                        "compact": {
                          "description": "Display as a toggle button selected by default.",
                          "type": "string",
                          "enum": [
                            "boolean:true"
                          ],
                          "example": "boolean:true"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}/report/{format}/{id}": {
      "get": {
        "operationId": "getReport",
        "tags": [
          "Reports"
        ],
        "summary": "Get report data for a period",
        "parameters": [
          {
            "in": "path",
            "name": "databaseName",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/0/schema"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "format",
            "schema": {
              "description": "A string defining the report format.",
              "type": "string",
              "enum": [
                "balance-sheet-detailed",
                "balance-sheet",
                "income-statement-detailed",
                "income-statement",
                "general-journal",
                "general-ledger"
              ],
              "example": "balance-sheet"
            },
            "required": true,
            "description": "The report format."
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/1/schema"
            },
            "required": true,
            "description": "The ID of the period."
          },
          {
            "in": "query",
            "name": "quarter1",
            "schema": {
              "description": "If set, limit to the first quarter.",
              "type": "string",
              "enum": [
                true,
                false
              ],
              "example": true
            }
          },
          {
            "in": "query",
            "name": "quarter2",
            "schema": {
              "description": "If set, limit to the first two quarters.",
              "type": "string",
              "enum": [
                true,
                false
              ],
              "example": true
            }
          },
          {
            "in": "query",
            "name": "quarter3",
            "schema": {
              "description": "If set, limit to the first three quarters.",
              "type": "string",
              "enum": [
                true,
                false
              ],
              "example": true
            }
          },
          {
            "in": "query",
            "name": "byTags",
            "schema": {
              "type": "string",
              "description": "If set, make separate columns per each associated tag.",
              "enum": [
                true,
                false
              ],
              "example": true
            }
          },
          {
            "in": "query",
            "name": "compact",
            "schema": {
              "type": "string",
              "description": "If set, use more compat version of the report.",
              "enum": [
                true,
                false
              ],
              "example": true
            }
          },
          {
            "in": "query",
            "name": "csv",
            "schema": {
              "type": "string",
              "description": "If set, produce CSV format.",
              "enum": [
                true,
                false
              ],
              "example": true
            }
          },
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "description": "Language.",
              "type": "string",
              "enum": [
                "fi",
                "en"
              ],
              "example": "en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meta data, column definitions and row data for a report.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "format": {
                      "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report~1%7Bformat%7D~1%7Bid%7D/get/parameters/1/schema"
                    },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "Type of the column data.",
                            "type": "string",
                            "enum": [
                              "id",
                              "name",
                              "numeric"
                            ],
                            "example": "numeric"
                          },
                          "name": {
                            "description": "Name of the key used in data array to refer a value in this column.",
                            "type": "string",
                            "example": "credit"
                          },
                          "title": {
                            "description": "Code defining the title to be shown for the report column.\nValues in {} are localized.\n",
                            "type": "string",
                            "example": "{column-credit}"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "businessName": {
                          "type": "string"
                        },
                        "businessId": {
                          "type": "string"
                        },
                        "additionalProperties": true
                      },
                      "example": {
                        "businessName": "Company Inc.",
                        "businessId": "1234567-US"
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                }
              },
              "application/csv": {
                "schema": {
                  "type": "string",
                  "description": "Report data rendered in CSV format by columns."
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    },
    "/db/{databaseName}/report/{format}/{id}/{account}": {
      "get": {
        "operationId": "getAccountReport",
        "tags": [
          "Reports"
        ],
        "summary": "Get report data for an account",
        "parameters": [
          {
            "in": "path",
            "name": "databaseName",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/0/schema"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "format",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report~1%7Bformat%7D~1%7Bid%7D/get/parameters/1/schema"
            },
            "required": true,
            "description": "The report format."
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/1/schema"
            },
            "required": true,
            "description": "The ID of the period."
          },
          {
            "in": "path",
            "name": "account",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1entry/get/parameters/1/schema"
            },
            "required": true,
            "description": "The ID of the account."
          },
          {
            "in": "query",
            "name": "csv",
            "schema": {
              "type": "string",
              "description": "If set, produce CSV format.",
              "enum": [
                true,
                false
              ],
              "example": true
            }
          },
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report~1%7Bformat%7D~1%7Bid%7D/get/parameters/9/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A report of transactions for a single account in the given period.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1db~1%7BdatabaseName%7D~1report~1%7Bformat%7D~1%7Bid%7D/get/responses/200/content/application~1json/schema"
                }
              },
              "application/csv": {
                "schema": {
                  "type": "string",
                  "description": "Report data rendered in CSV format by columns."
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1db/get/responses/403"
          }
        }
      }
    }
  }
}
